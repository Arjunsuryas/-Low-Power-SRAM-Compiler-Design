// RISC-V Processor Defines and Parameters
`ifndef RISCV_DEFINES_SV
`define RISCV_DEFINES_SV

package riscv_defines;
    // Data width parameters
    parameter XLEN = 32;
    parameter ILEN = 32;
    parameter REGFILE_SIZE = 32;
    parameter REGFILE_ADDR_WIDTH = 5;
    
    // Opcode definitions (RV32I)
    typedef enum logic [6:0] {
        OPCODE_LUI    = 7'b0110111,
        OPCODE_AUIPC  = 7'b0010111,
        OPCODE_JAL    = 7'b1101111,
        OPCODE_JALR   = 7'b1100111,
        OPCODE_BRANCH = 7'b1100011,
        OPCODE_LOAD   = 7'b0000011,
        OPCODE_STORE  = 7'b0100011,
        OPCODE_OP_IMM = 7'b0010011,
        OPCODE_OP     = 7'b0110011,
        OPCODE_FENCE  = 7'b0001111,
        OPCODE_SYSTEM = 7'b1110011
    } opcode_e;
    
    // Function3 codes for different instruction types
    typedef enum logic [2:0] {
        FUNCT3_ADD_SUB = 3'b000,
        FUNCT3_SLL     = 3'b001,
        FUNCT3_SLT     = 3'b010,
        FUNCT3_SLTU    = 3'b011,
        FUNCT3_XOR     = 3'b100,
        FUNCT3_SRL_SRA = 3'b101,
        FUNCT3_OR      = 3'b110,
        FUNCT3_AND     = 3'b111
    } funct3_e;
    
    // ALU operation codes
    typedef enum logic [3:0] {
        ALU_ADD  = 4'b0000,
        ALU_SUB  = 4'b0001,
        ALU_AND  = 4'b0010,
        ALU_OR   = 4'b0011,
        ALU_XOR  = 4'b0100,
        ALU_SLT  = 4'b0101,
        ALU_SLTU = 4'b0110,
        ALU_SLL  = 4'b0111,
        ALU_SRL  = 4'b1000,
        ALU_SRA  = 4'b1001,
        ALU_LUI  = 4'b1010,
        ALU_AUIPC= 4'b1011
    } alu_op_e;
    
    // Branch types
    typedef enum logic [2:0] {
        BRANCH_EQ  = 3'b000,
        BRANCH_NE  = 3'b001,
        BRANCH_LT  = 3'b100,
        BRANCH_GE  = 3'b101,
        BRANCH_LTU = 3'b110,
        BRANCH_GEU = 3'b111
    } branch_type_e;
    
    // Memory access types
    typedef enum logic [2:0] {
        MEM_BYTE     = 3'b000,
        MEM_HALF     = 3'b001,
        MEM_WORD     = 3'b010,
        MEM_BYTE_U   = 3'b100,
        MEM_HALF_U   = 3'b101
    } mem_type_e;
    
    // Control signals structure
    typedef struct packed {
        logic        reg_write;
        logic        mem_read;
        logic        mem_write;
        logic        branch;
        logic        jump;
        logic        alu_src;
        logic [1:0]  reg_write_src;
        alu_op_e     alu_op;
        mem_type_e   mem_type;
        branch_type_e branch_type;
    } control_t;
    
    // Pipeline register structures
    typedef struct packed {
        logic [XLEN-1:0] pc;
        logic [ILEN-1:0] instruction;
        logic            valid;
    } if_id_reg_t;
    
    typedef struct packed {
        logic [XLEN-1:0] pc;
        logic [XLEN-1:0] rs1_data;
        logic [XLEN-1:0] rs2_data;
        logic [XLEN-1:0] immediate;
        logic [REGFILE_ADDR_WIDTH-1:0] rd_addr;
        logic [REGFILE_ADDR_WIDTH-1:0] rs1_addr;
        logic [REGFILE_ADDR_WIDTH-1:0] rs2_addr;
        control_t        control;
        logic            valid;
    } id_ex_reg_t;
    
    typedef struct packed {
        logic [XLEN-1:0] alu_result;
        logic [XLEN-1:0] rs2_data;
        logic [REGFILE_ADDR_WIDTH-1:0] rd_addr;
        control_t        control;
        logic            valid;
    } ex_mem_reg_t;
    
    typedef struct packed {
        logic [XLEN-1:0] alu_result;
        logic [XLEN-1:0] mem_data;
        logic [REGFILE_ADDR_WIDTH-1:0] rd_addr;
        control_t        control;
        logic            valid;
    } mem_wb_reg_t;
    
endpackage

`endif // RISCV_DEFINES_SV
