// RISC-V Register File
module riscv_regfile
    import riscv_defines::*;
(
    input  logic                             clk,
    input  logic                             rst_n,
    
    // Read ports
    input  logic [REGFILE_ADDR_WIDTH-1:0]   rs1_addr,
    input  logic [REGFILE_ADDR_WIDTH-1:0]   rs2_addr,
    output logic [XLEN-1:0]                  rs1_data,
    output logic [XLEN-1:0]                  rs2_data,
    
    // Write port
    input  logic                             write_enable,
    input  logic [REGFILE_ADDR_WIDTH-1:0]   rd_addr,
    input  logic [XLEN-1:0]                  rd_data
);

    // Register file array
    logic [XLEN-1:0] registers [REGFILE_SIZE-1:0];
    
    // Asynchronous read
    assign rs1_data = (rs1_addr == 5'h0) ? 32'h0 : registers[rs1_addr];
    assign rs2_data = (rs2_addr == 5'h0) ? 32'h0 : registers[rs2_addr];
    
    // Synchronous write
    always_ff @(posedge clk) begin
        if (!rst_n) begin
            // Initialize all registers to zero
            for (int i = 0; i < REGFILE_SIZE; i++) begin
                registers[i] <= 32'h0;
            end
        end else if (write_enable && (rd_addr != 5'h0)) begin
            registers[rd_addr] <= rd_data;
        end
    end

endmodule
